--- RemoteServiceServlet.java	2007-07-12 11:12:36.000000000 -0300
+++ OpenRemoteServiceServlet.java	2007-07-12 11:37:54.000000000 -0300
@@ -13,7 +13,9 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.google.gwt.user.server.rpc;
+package org.ourproject.kune.server.servlet;
 
 import com.google.gwt.user.client.rpc.RemoteService;
 import com.google.gwt.user.client.rpc.SerializationException;
@@ -43,8 +45,12 @@
  * The servlet base class for your RPC service implementations that
  * automatically deserializes incoming requests from the client and serializes
  * outgoing responses for client/server RPCs.
+ *
+ * This version is a modified version of RemoteServiceServlet. The only changes
+ * have been to remove some final declarations and to convert some private
+ * methods to protected to allow extension of this class.
  */
-public class RemoteServiceServlet extends HttpServlet {
+public class OpenRemoteServiceServlet extends HttpServlet {
 
 	/*
 	 * These members are used to get and set the different HttpServletResponse
@@ -154,8 +160,8 @@
 	/**
 	 * This is called internally.
 	 */
-	public final void doPost(HttpServletRequest request,
+	public void doPost(HttpServletRequest request, 
			HttpServletResponse response) {
 		Throwable caught;
 		try {
 			// Store the request & response objects in thread-local storage.
@@ -516,12 +522,12 @@
 			// that
 			// implements the requested interface
 			//
-			while ((cls != null) && !RemoteServiceServlet.class.equals(cls)) {
+			while ((cls != null) && !OpenRemoteServiceServlet.class.equals(cls)) {
 				Class[] intfs = cls.getInterfaces();
 				for (int i = 0; i < intfs.length; i++) {
 					Class intf = intfs[i];
 					if (isImplementedRemoteServiceInterfaceRecursive(intfName,
							intf)) {
 						knownImplementedInterfaces.add(intfName);
 						return true;
 					}
@@ -565,7 +571,7 @@
 		return false;
 	}
 
-	private String readPayloadAsUtf8(HttpServletRequest request)
+	protected String readPayloadAsUtf8(HttpServletRequest request)
 	throws IOException, ServletException {
 		int contentLength = request.getContentLength();
 		if (contentLength == -1) {
@@ -621,32 +627,32 @@
 	 * the invoked third-party method. It writes a simple 500 message back to
 	 * the client.
 	 */
-	private void respondWithFailure(HttpServletResponse response,
+	protected void respondWithFailure(HttpServletResponse response,
			Throwable caught) {
 		ServletContext servletContext = getServletContext();
 		servletContext.log("Exception while dispatching incoming RPC call",
				caught);
 		try {
 			response.setContentType("text/plain");
 			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
 			response.getWriter().write(GENERIC_FAILURE_MSG);
 		} catch (IOException e) {
 			servletContext
			.log(
 					"sendError() failed while sending the previous failure to the client",
 					caught);
 		}
 	}
 
-	private void writeResponse(HttpServletRequest request,
+	protected void writeResponse(HttpServletRequest request,
			HttpServletResponse response, String responsePayload)
	throws IOException {
 
 		byte[] reply = responsePayload.getBytes(CHARSET_UTF8);
 		String contentType = CONTENT_TYPE_TEXT_PLAIN_UTF8;
 
 		if (acceptsGzipEncoding(request)
				&& shouldCompressResponse(request, response, responsePayload)) {
 			// Compress the reply and adjust headers.
 			//
 			ByteArrayOutputStream output = null;
