=Kune developer's guide=

''This is the kune/DEV-GUIDE file (must have the same content that this [http://kune.ourproject.org/wiki/index.php?title=Kune_developer's_guide wiki page])''. 

'''Note:''' Please edit kune/DEV-GUIDE instead of this wiki page.

==Development Environment==

===Preliminars===

This guide will help you to develop in Kune. It deals with the prerrequisites of Kune and the setup of its environment. You should follow each step carefully. Make sure you deal with the following initial steps and only afterwards proceed to the details of the installation of Kune. As mentioned in the subsection "1.7:Install Kune" of this guide, you will need by then the document INSTALL (found in kune/INSTALL ), where you will find the details of the installation.

===Initial steps===

Install some basic tools (if you don't have them). In Ubuntu, Debian and derivatives:

 sudo apt-get install git maven2 mercurial 

and Java 6:

 sudo apt-get install openjdk-6-jdk 

Note: we use Git for our code, Maven for its dependencies, and Wave In a Box (WIAB) uses Mercurial. Besides, you will need a modern browser such as Firefox or Chromium, and some extensions to live happier:

http://ourproject.org/moin/Contributors#Recommended_Firefox_Extensions

The previous link has also other more general information (texts and references) of interest for contributors.

===Get the code: How to checkout the Kune code===

Our code is in this Gitorious:
https://gitorious.org/kune

====Anonymous GIT Access====

This project's GIT repository can be checked out through anonymous access with the following command(s).

 git clone git@gitorious.org:kune/trunk.git

The Eclipse IDE has some plugins for GIT and it's hightly recomended to use one, because it would get rid of file/package renaming and other refactorizations.

===Next step: install Eclipse===

http://www.eclipse.org/downloads/

Ensure Eclipse is configured to use Java 1.6.

The instructions below will give for granted you use Eclipse. Of course, you can use any other IDEs (in such case, please help us to improve this documentation). 

====Some mandatory plugins for Eclipse====

From the Eclipse Marketplace (Help > Eclipse Marketplace (*)) install:

* Google Plugin for Eclipse https://code.google.com/intl/en/eclipse/docs/getting_started.html (if available, install also the GWT Designer from the Google repository)
* EGit plugin (Git for Eclipse)

(*): If the Marketplace does not appear in that menu, download the plugin "Marketplace Client" from the Install New Software > Your version repository > "General Purpose Tools" > Marketplace Client. Install and restart, and you will see Help > Eclipse Marketplace.

====Optional maven-eclipse integration ====

Check:
http://google-web-toolkit.googlecode.com/svn/trunk/samples/expenses/README-MAVEN.txt

===Eclipse configuration===

Check out if Kune's code includes Eclipse project definition files (i.e. '.project' & '.classpath') in the kune directory. 
(WARNING: if you imported manually the Kune source code into Eclipse, they were then created... but still you should run the following command.)
If these files do not exist, then you need to run (again from the kune directory):

 mvn eclipse:eclipse (IMPORTANT: (*)) 

This generates .project and download necessary code jars (this download process is long, so take a rest). 

After that, you can import the project in Eclipse (File > Import > Existing Projects into Workspace). 

Also you have to set the variable M2_REPO (Eclipse: Window > Preferences > Java > Build Path > Classpath Variables > New) to the location of your local maven repo (in our case /home/youruser/.m2/repository). (WARNING: It might exist already with an incorrect path. In that case, instead of "New" use "Edit").

(*) Note: We actually use bin/mvn-eclipse.sh instead of a simple 'mvn eclipse:eclipse' to hack a little bit the .classpath, because "mvn eclipse:eclipse" removes the GWT_CONTAINER line a the end of the .classpath. You can fix it from eclipse (anytime that we change the dependencies and you have to do a 'mvn eclipse:eclipse'), but we prefer to do it that way from the command line. In order to execute the script, run ./bin/mvn-eclipse.sh   from the kune directory.

====Configure Google GWT Plugin====

For now we are using GWT 2.1.1 (it usually will not match with the one from the eclipse GWT plugin) so probably you have to download that version of the SDK from:
http://code.google.com/p/google-web-toolkit/downloads/list
unzip (to any place you find appropriate), and add that SDK in Eclipse (Windows > Preferences > Google > Web Toolkit > Add). 

WARNING: Do not use any other higher GWT SDK versions (such as 2.4.0) because our code (and dependencies) are not compatible with higher versions and we should do a coordinated migration.

After that, right click Kune project in the "Package Explorer" > Google > WebApplication > WAR directory: set to src/main/webapp (after checking "This project has a WAR directory") and uncheck the "Launch and deploy from this directory".

Also in Kune project properties > Google > Web Toolkit > Check that you are using the 2.1.1 SDK. 

====Configure the Firefox GWT Plugin====

For that check this from Firefox:
http://gwt.google.com/missing-plugin/MissingPlugin.html
some times GWT plugin is not available for newers FF, so you have to search in the GWT dev forums for a nightly extension.

====UTF 8====

The charset used in Kune is UTF8. In Eclipse, check the text-file enconding in Package Explorer > Properties of Kune project > Resource > Text file encoding.

You can change this globally in Eclipse Preferences > General > Workspace.

Note: Please don't send patches in other charsets.

====Other recommended & suggested plugins for Eclipse==== 

From the Eclipse Marketplace:
* The FindBugs plugin (looks for bug patterns)

From the Google repository (as you installed the "Google Plugin for Eclipse" before):
* The GWT Designer GUI Builder plugin (a great helper to work with GWT UiBinder) 

From the repository http://pmd.sourceforge.net/eclipse
* The PMD Eclipse plugin (scans the code looking for potential problems). 

Also maybe some other plugins are interesting such as:
* Quick Junit
* JUnitHelper
* AnyEditTools (to remove tabs and so on)
* MercurialEclipse (if you wanna play with the WIAB code)

====Other Eclipse info====

Useful info about GWT and Eclipse (interesting if you have problems with number of open files or with the memory use):
http://code.google.com/p/gwt-examples/wiki/gwtEclipseFaqs

===Install Kune===

Only after making sure the previous steps have been finished, you can proceed to the installation of the rest of Kune. For doing so, you need to follow the instructions of the document INSTALL, available in kune/INSTALL. Afterwards you will be able to run Kune for the first time.

WARNING: The above paragraph means that the installation instructions are NOT in this document. Please, check out the referenced INSTALL document for the installing instructions, and come back here when those are finished.

===GWT's Hosted Mode===

Before run hosted mode for the first time compile once with:
 mvn compile -Dliquibase.should.run=false && mvn gwt:compile -P development
and deploy with:
 bin/deploy_gwt.sh 

Kune runs a specific jetty server (not necessary the one used by GWT), so we run the server and the client separately.

For now It's better not to use the "internal server" of GWT hosted mode because we need to control the version of the (jetty) server that we use for compatibilities reasons. This is why we run separately the client (hosted mode) and the server. 

In bin directory exist two (mainly) launch configurations:
- kune server via mvn.launch
- kune client  -no-server.launch
these configurations are eclipse run configurations that are normally imported by eclipse when you import the project (in GNU/Linux at least). See the Run and the Run External icon and menu options in the Eclipse toolbar to find these launchs. If is not there, try to import it (in Eclipse: File > Import > Launch Configurations > select the launchs from bin directory). Also try to fix the path for the mvn command (especially Windows users). Other option is to create a new one launch to run a external "mvn exec:java" because the previous launch were created in GNU/Linux systems.

Run it! Launch the first (it's equivalent to mvn exec:java) to start the kune server. After that, launch the second to start kune in hosted mode and connect to the previous server, so you can make code modifications, and refresh the browser to see the changes.

==== Optionally ==== 

You can run the server via bin/server.sh (also you can run server in debug mode, see TROUBLESHOOT or -h for help). This is quite useful to put breakpoints in the server code.

FIXME: this part is outdated

You can create a custom launch also at "Run configuration" (Run > Open Run Dialog) in eclipse with Project: "org.ourproject.kune" with Main class: "com.google.gwt.dev.DevMode", with this program arguments (or similar): "-noserver -out gwt-out /ws/?locale=en&log_level=INFO -port 8080" and in the "Classpath User Entries":
* gwt-dev-[linux|mac|windows].jar (Add External Jar and choose it from your gwt installation directory)
* java - /kune/src/main
* kune (default classpath)

If you have memory problems running the hosted mode, increase it in VM arguments:
 -Xmx1024M

==Some relevant docs for Kune development==

See this files in trunk directory:

* trunk/img/kune-arch.png          # architecture diagram (outdated)
* trunk/INSTALL
* trunk/TROUBLESHOOT
* trunk/FAQ
* trunk/HOWTO_ADD_A_NEW_TOOL

If you are interested in the db schema:
* trunk/img/kune-hibernate-diagram-oct-08.png
but is more easy to look in the Java classes of package cc.kune.domain, because this schema is probably outdated

* [http://kune.ourproject.org/2009/01/status-jan09/ Video/presentation of Kune]
* trunk/img/kune-diagram-part1-0.1.png # old diagrams but a good summary
* trunk/img/kune-diagram-part2-0.1.png 
* trunk/img/kune-diagram-part3-0.1.png 

==Languages and frameworks used in Kune development==

===Java===

The 2/3 main parts of Kune are developed in Java. The server code, and the workspace client code.

===GWT===

[http://code.google.com/webtoolkit/ GWT] is used for the client workspace. See the [http://code.google.com/intl/en/webtoolkit/gettingstarted.html Getting Started - Quick Start] or the [http://code.google.com/intl/es-ES/webtoolkit/makinggwtbetter.html Making GWT Better]. 

GWT is the key of our Kune workspace UI. As the GWT team says: «GWT's mission is to radically improve the web experience for users by enabling developers to use existing Java tools to build no-compromise AJAX for any modern browser.» and we think they achieved it.

===Rails===

[http://rubyonrails.org/ Ruby on Rails] is used for the public and more static front-end, but sharing the db schema with the Java client/server side.

===HTML/CSS/JavaScript===

All the HTML/JavaScript code of the client workspace is generated from the Java code using GWT. We use some minimal html/css (see kune.css, doc.css, workspace.css, Kune.html) plus the generated js (compiling the java code with GWT).

All the workspace css are concatenated and compressed using csstidy (see bin/css-compact-and-tidy.css if you want to know how).

==Notable dependencies==

Here some notable dependencies of Kune. For a more detailed list of dependences see kune/pom.xml file.

===Server side===

----

====guice====

[http://code.google.com/p/google-guice/ Guice] is used in server code for [http://en.wikipedia.org/wiki/Inversion_of_Control IoC]. As they describe «Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice's @Inject as the new new.».

In the GWT client code we use [https://code.google.com/p/google-gin/ Gin], also based in Guice.

For use details see the [https://code.google.com/docreader/#p=google-guice&s=google-guice&t=Motivation Guice User's Guide].

====Apache OpenJPA====

For db persistence, we use [http://openjpa.apache.org/ OpenJPA]. See the [http://openjpa.apache.org/docs/openjpa-0.9.0-incubating/manual/manual.html openjpa manual] for dev info.

====Guice Persist====

We use [https://code.google.com/p/google-guice/wiki/GuicePersist Guice-Persist] and its dynamic finders. That is Guice + Persistence + easy db query. See: UserFinder.java for a sample of finders.

====Lucene====

For content indexing, we use Lucene. We usually use [http://www.hibernate.org/hib_docs/search/reference/en/html/ Hibernate Search - Apache Lucene Integration] documentation.

===client side (GWT)===

----

====GIN====

[https://code.google.com/p/google-gin/ Gin] is the IoC library that we use for GWT. For more documentation see [https://code.google.com/p/google-gin/wiki/GinTutorial the Gin tutorial]. See also our Guice section above.

====Emite====

[http://emite.google.code emite] is our xmpp extensible library and client. See [http://code.google.com/p/emite/w/list the wiki] for more documentation about emite. It's a module totally independent of Kune, then you can also use emite in your website or project.

====UI Binder====
We use [https://code.google.com/intl/en/webtoolkit/doc/latest/DevGuideUiBinder.html UI Binder] for GWT Widgets. Also we use [https://code.google.com/intl/en/webtoolkit/tools/download-gwtdesigner.html GWT Designer Eclipse plugin] for developing these widgets.

====ext-gwt/gxt====

[http://www.sencha.com/products/extgwt/ gxt] is used for other parts of our gwt UI (like window dialogs, grids, etc). See the [http://www.sencha.com/examples/ gxt explorer] for sample codes and [http://www.sencha.com/gxtdocs/#overview gxt docs].

===client side (Rails)===

----

====JRuby-Rack====

(This part in now not used, probably we should go back when we return to develop the public part)

We use Rails via [http://kenai.com/projects/jruby-rack/pages/Home JRuby-Rack]. Ruby on Rails + Plugins + Gems are installed in trunk/src/main/webapp/WEB-INF/. Jetty uses these gems when running, but if you run ruby directly with bin/server.sh, take into account that you are using your installed local gems.

To install gems inside this directory:
 sudo gem install <name of the gem> -i src/main/webapp/WEB-INF/gems --no-rdoc --no-ri
and if you want to use gems locally in you system use a normal use the normal:
 sudo gem install <name of the gem>
it's recommended to have the same gems in your local installation and in jruby.

The rails plugins must be installed in src/main/webapp/WEB-INF/publicspace/ then when installed will work with your local ruby and with jruby via jetty.

For install rail plugins:
 cd src/main/webapp/WEB-INF/publicspace/
 ./script/plugin install (pluginName|http://...)

==Some recommendations==

===Usability===

We try to make Kune very usable. Then please think like a human and use a human language in the UI messages, not techie language or Klingon or an alien language ;). 

Your mother/father must understand and be capable of use Kune if they are capable of use yahoo/gmail/hotmail email accounts. It he/she are not capable of use Kune, we are not doing well our work, and we must do more usable our UI.

Some relevant links to solve doubts:

http://library.gnome.org/devel/hig-book/stable/
http://wiki.openusability.org/guidelines/
http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/OSXHIGuidelines.pdf

===Designs patterns===

* MVC: We use a lot the [http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller MVC pattern] in our GWT code. See our HelloWorldModule class for a simple sample. We used to auto generate some MVC classes with the script bin/generateBasicUIElements.sh:
 bin/generateBasicUIElements.sh <packageDirDest> <ClassName>
for instance:
 bin/generateBasicUIElements.sh src/main/java/org/ourproject/kune/workspace/client/options/ GroupOptions
this generates four classes GroupOptions (the external interface), GroupOptionsPresenter (the Presenter with the business logic, the part you must test well), the GroupOptionsView (the interface to the panel, the UI code), the GroupOptionsPanel (the UI code, here all the gwt UI stuff). Also gives you in the standard output a sample code to use suco in a module to build these objects.
* IoC: as we described before we use guice and suco for IoC. Again, see HelloWorldModule class for a very simple sample of gwt module using suco.

==Code preferences==

We use some eclipse code preferences for Kune project:
 dev-utils/kune.cleanup.eclipse.preferences.xml
 dev-utils/kune.formatter.eclipse.preferences.xml
please use it if you want to contribute.

We will (try) to follow:

http://code.google.com/webtoolkit/makinggwtbetter.html#codestyle

and the code conventions for the JavaTM Programming Language:

http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html

also we try to be a "Good Java Citizen":

http://docs.codehaus.org/display/PICO/Good+Citizen

Is recommended that you use the PMD plugin in eclipse:
http://pmd.sourceforge.net/
http://pmd.sourceforge.net/eclipse/

=== Identation ===

More than the eclipse code preferences we try to:
* Use spaces instead of tabs (for instance in xml, we try to use 2 spaces of identation)

==Use of Mylyn in eclipse==

We recommend to use Mylyn to track the Kune issues. Use the redmine mylyn connector from the Redmine-Mylyn update site : http://redmin-mylyncon.sourceforge.net/update-site/N/
for our redmine http://redmine.ourproject.org/. More info:
http://www.redmine.org/projects/redmine/wiki/HowTo_Mylyn
and also EGit for Mylyn plugin http://www.javaforge.com/project/EGIT

==Code samples==

See HelloWorld*.java classes to a small sample of how to develop and extend the gwt workspace UI.

Check also trunk/HOWTO_ADD_A_NEW_TOOL to instructions of how to add a new tool in Kune.

== Google Wave ==

Wave Client Development Environment Set Up (if you want to work only in the Apache Wave part):
http://www.waveprotocol.org/code/client-development-environment-set-up

David Hearnden recommendations of Wave code development (read in an informal Wave conversation):

"Being written in Java, we strongly recommend following the principles outlined in Effective Java. On top of that, patterns that aid testability (dependency injection, etc) are quite important. But beyond that, I don't know if there are any other patterns or practices that would be universal across the whole thing. The web client and the server run in very different environments, so the appropriate patterns change (e.g., the client-only code doesn't have to worry about thread safety, but should worry about excessive short-lived object creation)."

=== Docs about OT, Wave Model, etc ===

http://www.codecommit.com/blog/java/understanding-and-applying-operational-transformation
Wave Model Deep Dive: http://www.youtube.com/watch?v=6ZqpeFydq4A

Or for a list:
http://www.youtube.com/user/GoogleDevelopers/search?query=Wave

=== Running Hosted Mode without Wave webclient ===

See class WaveClientProvider in Kune (in a short term, we should define this in a .gwt.xml not there, but this is a start point).

==kune maven repo==

For upload packages you need to configure in .m2/settings.xml something like:

<?xml version="1.0" encoding="UTF-8"?>
<settings>
  <servers>
     <server>
        <id>kune.ourproject.org</id>
        <username>YOUR_USER_IN_OURPROJECT_ORG</username>
     </server>
  </servers>
</settings>

also you have to 
  ssh-copy-id YOUR_USER_IN_OURPROJECT_ORG@ourproject.org
and access via ssh with that key without problems.

We usually upload new packages to this repo via bin/repopubli.sh

==Changelog==

Periodically update the Changelog using svn2cl:
 
 # In debian a related distros: 'apt-get install svn2cl' and do:
 svn2cl -i --authors=dev-utils/authors.xml -o ChangeLog

then, put good descriptions on your changes in svn commit comments.

FIXME: Change this to something similar for git

==License==

Attach the following notices to each source of the program at the begining:
<pre>
    (c) 2007-2012 The Kune development team (see CREDITS for details)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
</pre>

In Java, something like this (you can put your name instead of "Kune team" if you create new files):

<pre>
/*
 *
 * Copyright (C) 2007-2012 The Kune development team (see CREDITS for details)
 * This file is part of Kune.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
</pre> 

==Get in touch==

===Mailing lists===

We use mainly two lists:
* [https://lists.ourproject.org/cgi-bin/mailman/listinfo/kune-devel kune-devel] for all development related topics
* [https://lists.ourproject.org/cgi-bin/mailman/listinfo/kune-commits kune-commits] where the repository sends the commit logs and summaries

It's recommended to be subscribed to both if you want to participate in the development.

===Twitter/identica===

Follow @kuneproject in twitter and @kune in identica. 

===Jenkins Continuous Integration Server===

http://ci.comunes.org
