=Kune developer's guide=

''This is the trunk/DEV-GUIDE file (must have the same content that this [http://kune.ourproject.org/wiki/index.php?title=Kune_developer's_guide wiki page])''. 

'''Note:''' Please edit trunk/DEV-GUIDE instead of this wiki page.

==Development Environment==

===Preliminars===

This guide will help you to develop in Kune. It deals with the prerrequisites of Kune and the setup of its environment. You should follow each step carefully. Make sure you deal with the following initial steps and only afterwards proceed to the details of the installation of Kune. As mentioned in the subsection "1.7:Install Kune" of this guide, you will need by then the document INSTALL (found in kune/trunk/INSTALL ), where you will find the details of the installation.

===Initial steps===

Install some basic tools (if you don't have them). In Ubuntu, Debian and derivatives:

 sudo apt-get install subversion maven2 mercurial 

and Java 6:

 sudo apt-get install openjdk-6-jdk 

Note: we use subversion for our code, maven for its dependencies, and Wave In a Box (WIAB) uses mercurial. Also you will need a modern browser like firefox or chromium, and some extensions to live happier:

http://ourproject.org/moin/Contributors#Recommended_Firefox_Extensions

the previous page has also other more general information (texts and references) of interest for contributors.

===Get the code: How to checkout the Kune code===

Our code is in the svn of ourproject: 
http://ourproject.org/scm/?group_id=407

====Anonymous Subversion Access====

This project's SVN repository can be checked out through anonymous access with the following command(s).

 svn checkout svn://scm.ourproject.org/svnroot/kune/trunk

====Developer Subversion Access via SSH====

Only project developers can access the SVN tree via this method. SSH must be installed on your client machine. Substitute colaborator with the proper values. Enter your ourproject web password when prompted.

 svn checkout svn+ssh://colaborator@scm.ourproject.org/svnroot/kune/trunk

The Eclipse IDE has several plugins for SVN (subversive, and subclipse) and it's hightly recomended to use it, because the get rid of file/package renaming and other refactorization.

===Next step: install Eclipse===

http://www.eclipse.org/downloads/

Ensure Eclipse is configured to use Java 1.6.

Of course, you can use other IDEs (and please help us to improve this doc in this case).

===Optional maven-eclipse integration ===

Check:
http://google-web-toolkit.googlecode.com/svn/trunk/samples/expenses/README-MAVEN.txt

===Eclipse configuration===

Check out if Kune's code includes Eclipse project definition files (i.e. '.project' & '.classpath') in the trunk directory. If these files do not exist, run (again in the trunk directory):

 mvn eclipse:eclipse 

generates .project and download necessary code jars. Then you can import the project in eclipse (File > Import > Existing Projects into Workspace). 

Also you have to set the variable M2_REPO (Eclipse: Window > Preferences > Java > Build Path > Classpath Variables > New) to the location of your local maven repo (in our case /home/youruser/.m2/repository).

===UTF 8===

The charset used in Kune is UTF8. In Eclipse, check the text-file enconding in Package Explorer > Preferences > Resource > Text file encoding.

Please don't send patchs in other charsets.

====Some mandatory plugins for Eclipse====

From the Eclipse Marketplace (Help > Eclipse Marketplace) install:

* Google Plugin for Eclipse https://code.google.com/intl/en/eclipse/docs/getting_started.html
* Subversive or Subclipse

====Some other recomended & suggested plugins for Eclipse==== 

Also from the Marketplace:

* The GWT Designer GUI Builder plugin (a great helper to work with GWT UiBinder)
* The PMD Eclipse plugin
* The FindBugs plugin
* The Mylyn Trac Connector (to integrate our trac issues system: http://kune.ourproject.org/issues/)

Also maybe it's interesting some other plugins like:

* Quick Junit
* JUnitHelper
* AnyEditTools (to remove tabs and so on)
* MercurialEclipse (if you wanna play with the WIAB code)

====Other eclipse info====

Useful info about GWT and Eclipse (interesting if you have problems with number of files open or with the memory use):
http://code.google.com/p/gwt-examples/wiki/gwtEclipseFaqs

===Install Kune===

Only after making sure the previous steps have been finished, you can proceed to the installation of Kune. For doing so, you need to follow the instructions of the document INSTALL, available in kune/trunk/INSTALL. Afterwards you will be able to run Kune for the first time. This will initialize the database, and configure the XMPP server, among other things.

===GWT's Hosted Mode===

To start the hosted mode, you can both execute the launch 'kune client -no-server' from your Eclipse or run from command line:

 mvn gwt:run

FIXME: this part is outdated

You can create a custom launch also at "Run configuration" (Run > Open Run Dialog) in eclipse with Project: "org.ourproject.kune" with Main class: "com.google.gwt.dev.DevMode", with this program arguments (or similar): "-noserver -out gwt-out /ws/?locale=en&log_level=INFO -port 8080" and in the "Classpath User Entries":
* gwt-dev-[linux|mac|windows].jar (Add External Jar and choose it from your gwt installation directory)
* java - /kune/src/main
* kune (default classpath)

If you have memory problems running the hosted mode, increase it in VM arguments:
 -Xmx1024M

before run hosted mode compile once with:
 mvn compile && mvn gwt:compile
and deploy with:
 script/deploy_gwt.sh 
and then we run jetty (with "script/server.sh" also you can run server in debug mode, see TROUBLESHOOT). This is quite useful to put breakpoints in the server code.

==Some relevant docs for Kune development==

See this files in trunk directory:

* trunk/img/kune-arch.png          # architecture diagram
* trunk/INSTALL
* trunk/TROUBLESHOOT
* trunk/FAQ
* trunk/HOWTO_ADD_A_NEW_TOOL

If you are interested in the db schema:
* trunk/img/kune-hibernate-diagram-oct-08.png
but is more easy to look in the Java classes of package cc.kune.domain

* [http://kune.ourproject.org/2009/01/status-jan09/ Video/presentation of Kune]
* trunk/img/kune-diagram-part1-0.1.png # old diagrams but a good summary
* trunk/img/kune-diagram-part2-0.1.png 
* trunk/img/kune-diagram-part3-0.1.png 

==Languages and frameworks used in Kune development==

===Java===

The 2/3 main parts of Kune are developed in Java. The server code, and the workspace client code.

===GWT===

[http://code.google.com/webtoolkit/ GWT] is used for the client workspace. See the [http://code.google.com/intl/en/webtoolkit/gettingstarted.html Getting Started - Quick Start] or the [http://code.google.com/intl/es-ES/webtoolkit/makinggwtbetter.html Making GWT Better]. 

GWT is the key of our Kune workspace UI. As the GWT team says: «GWT's mission is to radically improve the web experience for users by enabling developers to use existing Java tools to build no-compromise AJAX for any modern browser.» and we think they achieved it.

===Rails===

[http://rubyonrails.org/ Ruby on Rails] is used for the public and more static front-end, but sharing the db schema with the Java client/server side.

===HTML/CSS/JavaScript===

All the HTML/JavaScript code of the client workspace is generated from the Java code using GWT. We use some minimal html/css (see kune.css, doc.css, workspace.css, Kune.html) plus the generated js (compiling the java code with GWT).

All the workspace css are concatenated and compressed using csstidy (see script/css-compact-and-tidy.css if you want to know how).

==Notable dependencies==

Here some notable dependencies of Kune. For a more detailed list of dependences see trunk/pom.xml file.

===Server side===

----

====guice====

[http://code.google.com/p/google-guice/ Guice] is used in server code for [http://en.wikipedia.org/wiki/Inversion_of_Control IoC]. As they describe «Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice's @Inject as the new new.».

In the GWT client code we use [https://code.google.com/p/google-gin/ Gin], also based in Guice.

For use details see the [https://code.google.com/docreader/#p=google-guice&s=google-guice&t=Motivation Guice User's Guide].

====Apache OpenJPA====

For db persistence, we use [http://openjpa.apache.org/ OpenJPA]. See the [http://openjpa.apache.org/docs/openjpa-0.9.0-incubating/manual/manual.html openjpa manual] for dev info.

====Guice Persist====

We use [https://code.google.com/p/google-guice/wiki/GuicePersist Guice-Persist] and its dynamic finders. That is Guice + Persistence + easy db query. See: UserFinder.java for a sample of finders.

====Lucene====

For content indexing, we use Lucene. We usually use [http://www.hibernate.org/hib_docs/search/reference/en/html/ Hibernate Search - Apache Lucene Integration] documentation.

===client side (GWT)===

----

====GIN====

[https://code.google.com/p/google-gin/ Gin] is the IoC library that we use for GWT. For more documentation see [https://code.google.com/p/google-gin/wiki/GinTutorial the Gin tutorial]. See also our Guice section above.

====Emite====

[http://emite.google.code emite] is our xmpp extensible library and client. See [http://code.google.com/p/emite/w/list the wiki] for more documentation about emite. It's a module totally independent of Kune, then you can also use emite in your website or project.

====UI Binder====
We use [https://code.google.com/intl/en/webtoolkit/doc/latest/DevGuideUiBinder.html UI Binder] for GWT Widgets. Also we use [https://code.google.com/intl/en/webtoolkit/tools/download-gwtdesigner.html GWT Designer Eclipse plugin] for developing these widgets.

====ext-gwt/gxt====

[http://www.sencha.com/products/extgwt/ gxt] is used for other parts of our gwt UI (like window dialogs, grids, etc). See the [http://www.sencha.com/examples/ gxt explorer] for sample codes and [http://www.sencha.com/gxtdocs/#overview gxt docs].

===client side (Rails)===

----

====JRuby-Rack====

We use Rails via [http://kenai.com/projects/jruby-rack/pages/Home JRuby-Rack]. Ruby on Rails + Plugins + Gems are installed in trunk/src/main/webapp/WEB-INF/. Jetty uses these gems when running, but if you run ruby directly with script/server, take into account that you are using your installed local gems.

To install gems inside this directory:
 sudo gem install <name of the gem> -i src/main/webapp/WEB-INF/gems --no-rdoc --no-ri
and if you want to use gems locally in you system use a normal use the normal:
 sudo gem install <name of the gem>
it's recommended to have the same gems in your local installation and in jruby.

The rails plugins must be installed in src/main/webapp/WEB-INF/publicspace/ then when installed will work with your local ruby and with jruby via jetty.

For install rail plugins:
 cd src/main/webapp/WEB-INF/publicspace/
 ./script/plugin install (pluginName|http://...)

==Some recommendations==

===Usability===

We try to make Kune very usable. Then please think like a human and use a human language in the UI messages, not techie language or Klingon or an alien language ;). 

Your mother/father must understand and be capable of use Kune if they are capable of use yahoo/gmail/hotmail email accounts. It he/she are not capable of use Kune, we are not doing well our work, and we must do more usable our UI.

Some relevant links to solve doubts:

http://library.gnome.org/devel/hig-book/stable/
http://wiki.openusability.org/guidelines/
http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/OSXHIGuidelines.pdf

===Designs patterns===

* MVC: We use a lot the [http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller MVC pattern] in our GWT code. See our HelloWorldModule class for a simple sample. We used to auto generate some MVC classes with the script script/generateBasicUIElements.sh:
 bin/generateBasicUIElements.sh <packageDirDest> <ClassName>
for instance:
 bin/generateBasicUIElements.sh src/main/java/org/ourproject/kune/workspace/client/options/ GroupOptions
this generates four classes GroupOptions (the external interface), GroupOptionsPresenter (the Presenter with the business logic, the part you must test well), the GroupOptionsView (the interface to the panel, the UI code), the GroupOptionsPanel (the UI code, here all the gwt UI stuff). Also gives you in the standard output a sample code to use suco in a module to build these objects.
* IoC: as we described before we use guice and suco for IoC. Again, see HelloWorldModule class for a very simple sample of gwt module using suco.

==Code preferences==

We use some eclipse code preferences for Kune project:
 dev-utils/kune.cleanup.eclipse.preferences.xml
 dev-utils/kune.formatter.eclipse.preferences.xml
please use it if you want to contribute.

We will (try) to follow:

http://code.google.com/webtoolkit/makinggwtbetter.html#codestyle

and the code conventions for the JavaTM Programming Language:

http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html

also we try to be a "Good Java Citizen":

http://docs.codehaus.org/display/PICO/Good+Citizen

Is recommended that you use the PMD plugin in eclipse:
http://pmd.sourceforge.net/
http://pmd.sourceforge.net/eclipse/

=== Identation ===

More than the eclipse code preferences we try to:
* Use spaces instead of tabs (for instance in xml, we try to use 2 spaces of identation)

==Use of mylyn in eclipse==

We recommend to use mylyn to track the Kune issues. Use the trac mylyn connector for http://kune.ourproject.org/issues/.

==Code samples==

See HelloWorld*.java classes to a small sample of how to develop and extend the gwt workspace UI.

Check also trunk/HOWTO_ADD_A_NEW_TOOL to instructions of how to add a new tool in Kune.

== Google Wave ==

David Hearnden recommendations of Wave code development (read in an informal Wave conversation):

"Being written in Java, we strongly recommend following the principles outlined in Effective Java. On top of that, patterns that aid testability (dependency injection, etc) are quite important. But beyond that, I don't know if there are any other patterns or practices that would be universal across the whole thing. The web client and the server run in very different environments, so the appropriate patterns change (e.g., the client-only code doesn't have to worry about thread safety, but should worry about excessive short-lived object creation)."

==Changelog==

Periodically update the Changelog using svn2cl:
 
 # In debian a related distros: 'apt-get install svn2cl' and do:
 svn2cl -i --authors=dev-utils/authors.xml -o ChangeLog

then, put good descriptions on your changes in svn commit comments.

==License==

Attach the following notices to each source of the program at the begining:
<pre>
    (c) 2007-2011 The Kune development team (see CREDITS for details)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
</pre>

In Java, something like this (you can put your name instead of "Kune team" if you create new files):

<pre>
/*
 *
 * Copyright (C) 2007-2011 The Kune development team (see CREDITS for details)
 * This file is part of Kune.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
</pre> 

==Get in touch==

===Mailing lists===

We use mainly two lists:
* [https://lists.ourproject.org/cgi-bin/mailman/listinfo/kune-devel kune-devel] for all development related topics
* [https://lists.ourproject.org/cgi-bin/mailman/listinfo/kune-commits kune-commits] where the svn sends the commit logs and summaries

It's recommended to be subscribed to both if you want to participate in the development.

===Twitter/identica===

Follow @kuneproject in twitter and @kune in identica. 

===Jenkins Continuous Integration Server===

http://ci.comunes.org
